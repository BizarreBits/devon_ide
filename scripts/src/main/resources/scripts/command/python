#!/usr/bin/env bash

# autocompletion list
if [ "${1}" = "shortlist" ]
then
  if [ -z "${2}" ]
  then
    echo "setup help version pip pip3 version -v --version"
  fi
  exit
fi

if [ -n "${DEVON_IDE_TRACE}" ]; then set -vx; fi
# shellcheck source=scripts/functions
source "$(dirname "${0}")"/../functions


function doSetup() {

  if [ ! -d "${PYTHON_HOME}" ] || [ "${1}" != "silent" ]
  then
    # Get leatest release
    if [ -z "${PYTHON_VERSION}" ]
    then
      doDebug "Python Home: ${PYTHON_HOME}"
      doEcho "Getting latest release..."
      PYTHON_VERSION="3.10.5"
	  fi

    if doIsMacOs
    then
      if doIsBrewInstalled
      then
        brew install openssl
      else
        doWarning "Warning. Brew is required to install python properly with pip. Installation will be attempted, but might fail or lead to unexpected errors."
      fi
      doInstall "-" "${PYTHON_HOME}" "python" "${PYTHON_VERSION}" "" "Python"
      sh "${PYTHON_HOME}"/configure MACOSX_DEPLOYMENT_TARGET=12 --enable-optimizations --with-ensurepip=install --with-openssl=/opt/homebrew/opt/openssl@3 --prefix="${PYTHON_HOME}"
      make -j 8
      make altinstall
      make clean
      make distclean
      
    elif doIsWindows
    then
      doEcho "Getting pip install file"
      # https://github.com/pypa/get-pip
      curl -sSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
      doInstall "-" "${PYTHON_HOME}" "python" "${PYTHON_VERSION}" "" "python"
      doRunPython "get-pip.py"
      rm get-pip.py
      if [ -a "$(find "${PYTHON_HOME}" -name '*._pth')" ]
      then
        PTH_FILE="$(find "${PYTHON_HOME}" -name '*._pth')"
        doEcho "Freeing Python from embedded Mode..."
        sed -i -e 's/#import site/import site/g' "${PTH_FILE}"
      else
        doEcho "Error. Couldn't find _pth file."
      fi
      
      # rename folder from Scripts to bin
      if [ -d "${PYTHON_HOME}/Scripts" ]
      then
        mv "${PYTHON_HOME}"/Scripts "${PYTHON_HOME}"/bin
      fi
      
    else
      doInstallWithPackageManager "apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev" \
                                  "yum -y groupinstall \"Development Tools\"" \
                                  "zypp install automake fdupes gcc gcc-c++ gcc-fortran gdbm-devel gettext-tools gmp-devel intltool libbz2-devel libexpat-devel libffi-devel libnsl-devel lzma-devel make ncurses-devel netcfg openssl-devel pkgconfig readline-devel sqlite-devel xz zlib-devel"
      
      
      doInstall "-" "${PYTHON_HOME}" "python" "${PYTHON_VERSION}" "" "Python"
      "${PYTHON_HOME}"/configure --enable-optimizations --with-ensurepip=install --prefix="${PYTHON_HOME}"
      make -j 8
      make altinstall
      make clean
      make distclean
 
    fi
    
    if [ -d "${DEVON_IDE_HOME}/Python" ]
    then
      rm -r "${DEVON_IDE_HOME}/Python"
    fi
    
  fi

  # set bin locations
  if ! doIsWindows
  then
    PYTHON_EXE=$(find "${PYTHON_BIN}" -name "python3.*" | sort | head -1)
    PIP_EXE=$(find "${PYTHON_BIN}" -name "pip*" | sort | head -1)
  else
    PYTHON_EXE="${PYTHON_HOME}/python.exe"
    PIP_EXE="${PYTHON_BIN}/pip.exe"
    PIP3_EXE="${PYTHON_BIN}/pip3.exe"
  fi
 
  # check version
  if [ "${1}" != "silent" ] && ! doIsQuiet
  then
    doRunCommand "${PYTHON_EXE} --version"
  fi 
  

}

function setPath() {
  local path_bind="PATH=\$PATH:"
  local set_path="${path_bind}${PYTHON_BIN}"
  if ! grep -q "${set_path}" "${DEVON_IDE_HOME}/conf/devon.properties"
    then
      export "${set_path}"
      echo -e "\n${set_path}" >> "${DEVON_IDE_HOME}/conf/devon.properties"
      doEcho "Python and pip path is added to ${DEVON_IDE_HOME}/conf/devon.properties"
  fi
}

function doRunPython() {
  doSetup silent
  if doIsQuiet
  then
    doRunCommand "${PYTHON_EXE} ${@}" > /dev/null
  else
    doRunCommand "${PYTHON_EXE} ${@}"
  fi
}

function doRunPip() {
  doSetup silent
  if [ "${1}" = "pip" ]
  then
    doEcho "Running: ${*}"
    shift
    if doIsQuiet
    then
        doRunPython "${PIP_EXE}" "${@}" > /dev/null
    else
        doRunPython "${PIP_EXE}" "${@}"
    fi
  elif [ "${1}" = "pip3" ] && doIsWindows
  then
    doEcho "Running: pip3 ${*}"
    if doIsQuiet
    then
      doRunPython "${PIP3_EXE}" "${@}" > /dev/null
    else
      doRunPython "${PIP3_EXE}" "${@}"
   fi

  fi
}


PYTHON_HOME="${DEVON_IDE_HOME}/software/python"
PYTHON_BIN="${PYTHON_HOME}/bin"

#in linux and mac, filenames might change their version numbers
if ! doIsWindows
then
  PYTHON_EXE=$(find "${PYTHON_BIN}" -name "python3.*" | sort | head -1)
  PIP_EXE=$(find "${PYTHON_BIN}" -name "pip*" | sort | head -1)
else
  PYTHON_EXE="${PYTHON_HOME}/python.exe"
  PIP_EXE="${PYTHON_BIN}/pip.exe"
  PIP3_EXE="${PYTHON_BIN}/pip3.exe"
fi


 case ${1} in 
  "help" | "-h")
    echo "Install Python."
    echo
    echo "Arguments:"
    echo " setup                    setup Python."
    echo " version                  get Python version."
    echo " pip                      call pip."
    echo " pip3                     call pip3 (Windows only)"
    echo
  ;;
  "setup" | "s" | "")
    doEcho "Installing python..."
    doSetup
  ;;
  "version" | "-v" | "--version")
     doRunPython --version
  ;;
  "pip" | "pip3")
     doRunPip "${@}"
  ;;
  *)
     doRunPython "${@}"
  ;;
esac
